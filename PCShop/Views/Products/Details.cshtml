@using System.Text.Json;
@model PCShop.Models.ProductVM

@{
    ViewData["Title"] = "Details";
}

<div class="text-center">
    <div class="d-lg-inline-block align-top">
        <img src="@Model.Image" alt="da" width="400" height="350" />
    </div>
    <div>
        <h2 id="productTitle">
            @Model.Name @Model.Model
        </h2>
        <div class="d-flex justify-content-center">
            <div class="d-lg-inline-block align-top p-30" style="margin: 0 5px">
                <h5>Single price</h5>
                <hr />
                <span id="pricePerProduct">@Model.Price</span>
                <span> BGN.</span>
            </div>
            <div class="d-lg-inline-block align-top p-30" style="margin: 0 5px">
                <h5>Total price</h5>
                <hr />
                <span id="totalPrice">@Model.Price</span>
                <span> BGN.</span>
            </div>
        </div>
        <div style="margin: 10px 0">
            @{
                if (Model.Quantity > 0)
                {
                    <p>In Stock: @Model.Quantity</p>
                }
                else
                {
                    <p class="text-danger">Not Available</p>
                }
            }
        </div>

        <div class="d-flex align-items-center justify-content-center">
            <label class="font-weight-bold text-left mr-1">Quantity:</label>
            <div style="margin: 0 10px">
                <input class="form-control text-center m-auto" type="number" min="1" max="@Model.Quantity" value="1" id="count" onChange="CalculatePrice()" />
            </div>
            <button class="btn btn-danger" onclick='orderViewModel.addToBasket({
                Product: @Html.Raw(Json.Serialize(Model)),
                Price: @Model.Price,
                DiscountApplied: @Model.Discount === 0 ? false : true,
                Count: document.getElementById(`count`).value
            })'>Order</button>
        </div>
    </div>

    <div style="margin-top: 45px">
        <h2>Technical Details</h2>
        <table class="table table-striped">
            <tbody>
                @foreach (var item in Model.Description.Split(','))
                {
                    <tr>
                        @{
                            try
                            {
                                var line = item.Split(':');

                                <td>
                                    <strong>@line[0]</strong>
                                </td>
                                <td>
                                    @line[1]
                                </td>
                            }
                            catch
                            {
                                <td>
                                    <strong>@item</strong>
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script>
    function CalculatePrice() {
        let quantity = parseFloat(document.getElementById('count').value)
        let pricePerProduct = parseFloat(document.getElementById('pricePerProduct').textContent)
        document.getElementById('totalPrice').textContent = (quantity * pricePerProduct).toFixed(2)
    }
</script>